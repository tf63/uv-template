[project]
name = "sample"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.8"
dependencies = []

[tool.uv]
dev-dependencies = [
    "pytest>=8.3.4",
    "mypy>=1.14.1",
    "ruff>=0.8.6",
    "jupyter>=1.1.1",
    "ipykernel>=6.29.5",
    "pre-commit>=3.5.0",
]

[tool.hatch.build.targets.wheel]
packages = ["src/sample"]

[tool.hatch.build.targets.sdist]
include = ["src/**/*.py"]
exclude = ["src/**/*_test.py"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# https://docs.astral.sh/uv/configuration/indexes/
[tool.ruff]
line-length = 119
indent-width = 4
# include files: ["*.py", "*.pyi", "**/pyproject.toml] https://docs.astral.sh/ruff/settings/#include
# exclude files: [".venv", "dist", ...] https://docs.astral.sh/ruff/settings/#exclude

[tool.ruff.format]
quote-style = "single"
indent-style = "space"
line-ending = "auto"
docstring-code-line-length = "dynamic"
docstring-code-format = true
skip-magic-trailing-comma = false

# https://docs.astral.sh/ruff/rules/
[tool.ruff.lint]
select = [
    "F",      # Pyflakes
    "E",      # Pycodestyle Error
    "W",      # Pycodestyle Warning
    "N",      # PEP8-naming
    "UP",     # Pyupgrade
    "C90",    # mccabe
    "I",      # isort
    "YTT",    # flake8-2020
    "ANN002", # flake8-annotations -- Missing type annotation for *{name}
    "ANN003", # flake8-annotations -- Missing type annotation for **{name}
    "ASYNC",  # flake8-async
    "S",      # flake8-bandit
    "B",      # flake8-bugbear
    "BLE",    # flake8-blind-except
    "A",      # flake8-builtins
    "C4",     # flake8-comprehensions
    "DTZ",    # flake8-datetimez
    "ISC",    # flake8-implicit-str-concat
    "INP001", # flake8-no-pep420 -- File {filename} is part of an implicit namespace package
    "PIE",    # flake8-pie
    "PYI",    # flake8-pyi
    "RSE",    # flake8-raise
    "SLF",    # flake8-SLF
    "SLOT",   # flake8-slots
    "SIM",    # flake8-simplify
    "FIX",    # flake8-fixme
    "PD",     # pandas-vet
    "PL",     # Pylint
    "FLY",    # flynt
    "NPY",    # Numpy-specific rules
    "PERF",   # Perflint
    "FURB",   # refurb
    "RUF",    # Ruff
    # "D",    # pydocstyle
    # "FBT",  # flake8-boolean-trap
    # "COM",  # flake8-commas
    # "CPY",  # flake8-copyright
    # "T10",  # flake8-debugger
    # "DJ",   # flake8-django
    # "EM",   # flake8-errmsg
    # "EXE",  # flake8-executable
    # "FA",   # flake8-future-annotations
    # "ICN",  # flake8-import-conventions
    # "LOG",  # flake8-logging
    # "G",    # flake8-logging-format
    # "T",    # flake8-print
    # "PT",   # flake8-pytest-style
    # "RET",  # flake8-return
    # "TID",  # flake8-tidy-imports
    # "TC",   # flake8-type-checking
    # "INT",  # flake8-gettext
    # "ARG",  # flake8-unused-arguments
    # "PTH",  # flake8-use-pathlib
    # "TD",   # flake8-todos
    # "ERA",  # eradicate -- Found commented-out code
    # "PGH",  # pygrep-hooks
    # "TRY",  # tryceratops
    # "FAST", # FastAPI
    # "AIR",  # Airflow
    # "DOC",  # pydoclint
]

ignore = [
    "F401",   # Unused import
    "E402",   # Module level import not at top of cell
    "E501",   # Line too long ({width} > {limit})
    "S101",   # Use of assert detected
    "SIM108", # Use ternary operator {contents} instead of if-else-block
    "SIM114", # Combine if branches using logical or operator
    "SIM118", # Use `key in dict` instead of `key in dict.keys()`

    # Formatter Conflict
    "W191",   # Checks for indentation that uses tabs
    "E111",   # Checks for indentation with a non-multiple of 4 spaces
    "E114",   # Checks for indentation of comments with a non-multiple of 4 spaces
    "E117",   # Checks for over-indented code.
    "D206",   # Checks for docstrings that are indented with tabs
    "D300",   # Checks for docstrings that use '''triple single quotes''' instead of """triple double quotes"""
    "Q000",   # Checks for inline strings that use single quotes or double quotes
    "Q001",   # Checks for multiline strings that use single quotes or double quotes
    "Q002",   # Checks for docstrings that use single quotes or double quotes
    "Q003",   # Checks for strings that include escaped quotes
    "COM812", # Checks for the absence of trailing commas
    "COM819", # Checks for the presence of prohibited trailing commas
    "ISC001", # Checks for implicitly concatenated strings on a single line
    "ISC002", # Checks for implicitly concatenated strings that span multiple lines
]

[tool.ruff.lint.isort]
case-sensitive = true
combine-as-imports = true

[tool.mypy]
python_version = "3.12"
ignore_missing_imports = true
check_untyped_defs = true
exclude = ["/.venv/"]

[tool.pytest.ini_options]
testpaths = ["src"]
filterwarnings = ["ignore::DeprecationWarning"]
addopts = ["--ignore=.venv"]
